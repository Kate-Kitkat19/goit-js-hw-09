{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAuBjC,SAASI,EAAcC,EAAUJ,GAC/B,IAAMK,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUJ,UAEpBU,EAAO,CAAEN,WAAUJ,S,GAEpBA,E,IAIP,SAASY,EAAYC,G,IAAET,EAAFS,EAAET,SAAUJ,EAAZa,EAAYb,MAC/Bc,EAAApB,GAASqB,OAAOC,QAAQ,sBAAuCC,OAAfb,EAAS,QAAYa,OAANjB,EAAM,M,CAGvE,SAASkB,EAAcL,G,IAAET,EAAFS,EAAET,SAAUJ,EAAZa,EAAYb,MACjCc,EAAApB,GAASqB,OAAOI,QAAQ,uBAAsCF,OAAfb,EAAS,QAAYa,OAANjB,EAAM,M,CAtCtEJ,EAAKC,KAAKuB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAIF,IAHA,IAAMpB,EAASN,EAAKM,OAAOqB,MACrBC,EAAQ5B,EAAKI,MAAMuB,MACnBtB,EAAOL,EAAKK,KAAKsB,MACdE,EAAI,EAAGA,EAAIvB,EAAQuB,GAAK,EAAG,CAClC,IAAMC,EAAWC,OAAOF,GAAK,EACvBG,EAAeD,OAAOH,GAASvB,EAAO,CAACwB,GAC7CtB,EAAcuB,EAAUE,GACrBC,MAAK,SAAAhB,GACJK,EAAc,CAAEd,SADDS,EAART,SACmBJ,MADJa,EAALb,O,IAGlB8B,OAAM,SAAAjB,GACLD,EAAY,CAAER,SADES,EAART,SACgBJ,MADDa,EAALb,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const amount = refs.amount.value;\n  const delay = refs.delay.value;\n  const step = refs.step.value;\n  for (let i = 0; i < amount; i += 1) {\n    const position = Number(i) + 1;\n    const currentDelay = Number(delay) + step * [i];\n    createPromise(position, currentDelay)\n      .then(({ position, delay }) => {\n        notifySuccess({ position, delay });\n      })\n      .catch(({ position, delay }) => {\n        notifyError({ position, delay });\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction notifyError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\nfunction notifySuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$notifyError","param","$parcel$interopDefault","Notify","failure","concat","$ce04d3a99e08e73b$var$notifySuccess","success","addEventListener","e","preventDefault","value","delay1","i","position1","Number","currentDelay","then","catch"],"version":3,"file":"03-promises.dcae2343.js.map"}